<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Releases on 董先森博客</title>
    <link>https://dwg678.github.io/categories/releases/</link>
    <description>Recent content in Releases on 董先森博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 May 2019 14:36:48 +0800</lastBuildDate>
    
	<atom:link href="https://dwg678.github.io/categories/releases/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>了解MVC设计模式</title>
      <link>https://dwg678.github.io/2019/mvc/</link>
      <pubDate>Fri, 17 May 2019 14:36:48 +0800</pubDate>
      
      <guid>https://dwg678.github.io/2019/mvc/</guid>
      <description>MVC设计模式 MVC模式（Model-View-Controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。
MVC模式最早由Trygve Reenskaug在1978年提出[1] ，是施乐帕罗奥多研究中心（Xerox PARC）在20世纪80年代为程序语言Smalltalk发明的一种软件设计模式。MVC模式的目的是实现一种动态的程序设计，使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。除此之外，此模式通过对复杂度的简化，使程序结构更加直观。软件系统通过对自身基本部分分离的同时也赋予了各个基本部分应有的功能。专业人员可以通过自身的专长分组：
（控制器Controller）- 负责转发请求，对请求进行处理。
（视图View） - 界面设计人员进行图形界面设计。
（模型Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。
图：在视图中其实没有真正的处理发生，不管这些数据是联机存储的还是一个雇员列表，作为视图来讲，它只是作为一种输出数据并允许用户操纵的方式。
模型：模型表示企业数据和业务规则。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用象EJBs和ColdFusionComponents这样的构件对象来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。
控制器：控制器接受用户的输入并调用模型和视图去完成用户的需求。所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。
优点：
*在最初的JSP网页中，像数据库查询语句这样的数据层代码和像HTML这样的表示层代码混在一起。经验比较丰富的开发者会将数据从表示层分离开来，但这通常不是很容易做到的，它需要精心地计划和不断的尝试。MVC从根本上强制性地将它们分开。尽管构造MVC应用程序需要一些额外的工作，但是它带给我们的好处是毋庸置疑的。
*首先，多个视图能共享一个模型。如今，同一个Web应用程序会提供多种用户界面，例如用户希望既能够通过浏览器来收发电子邮件，还希望通过手机来访问电子邮箱，这就要求Web网站同时能提供Internet界面和WAP界面。在MVC设计模式中，模型响应用户请求并返回响应数据，视图负责格式化数据并把它们呈现给用户，业务逻辑和表示层分离，同一个模型可以被不同的视图重用，所以大大提高了代码的可重用性。
*其次，控制器是自包含（self-contained）指高独立内聚的对象，与模型和视图保持相对独立，所以可以方便的改变应用程序的数据层和业务规则。例如，把数据库从MySQL移植到Oracle，或者把RDBMS数据源改变成LDAP数据源，只需改变控制器即可。一旦正确地实现了控制器，不管数据来自数据库还是LDAP服务器，视图都会正确地显示它们。由于MVC模式的三个模块相互独立，改变其中一个不会影响其他两个，所以依据这种设计思想能构造良好的少互扰性的构件。
*此外，控制器提高了应用程序的灵活性和可配置性。控制器可以用来连接不同的模型和视图去完成用户的需求，也可以构造应用程序提供强有力的手段。给定一些可重用的模型和视图，控制器可以根据用户的需求选择适当的模型进行处理，然后选择适当的的视图将处理结果显示给用户。
MVC的优点
1.低耦合性 *视图层和业务层分离，这样就允许更改视图层代码而不用重新编译模型和控制器代码，同样，一个应用的业务流程或者业务规则的改变只需要改动MVC的模型层即可。因为模型与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。
2.高重用性和可适用性 *随着技术的不断进步，现在需要用越来越多的方式来访问应用程序。MVC模式允许你使用各种不同样式的视图来访问同一个服务器端的代码。它包括任何 WEB（HTTP）浏览器或者无线浏览器（wap），比如，用户可以通过电脑也可通过手机来订购某样产品，虽然订购的方式不一样，但处理订购产品的方式是 一样的。由于模型返回的数据没有进行格式化，所以同样的构件能被不同的界面使用。例如，很多数据可能用HTML来表示，但是也有可能用WAP来表示，而这 些表示所需要的命令是改变视图层的实现方式，而控制层和模型层无需做任何改变。
3.较低的生命周期成本 *MVC使开发和维护用户接口的技术含量降低。
4.快速的部署 *使用MVC模式使开发时间得到相当大的缩减，它使程序员（Java开发人员）集中精力于业务逻辑，界面程序员（HTML和JSP开发人员）集中精力于表现形式上。
5.可维护性 *分离视图层和业务逻辑层也使得WEB应用更易于维护和修改。
6.有利于软件工程化管理 *由于不同的层各司其职，每一层不同的应用具有某些相同的特征，有利于通过工程化、工具化管理程序代码。</description>
    </item>
    
    <item>
      <title>Hello_hugo</title>
      <link>https://dwg678.github.io/2019/hello_hugo/</link>
      <pubDate>Thu, 16 May 2019 11:27:34 +0800</pubDate>
      
      <guid>https://dwg678.github.io/2019/hello_hugo/</guid>
      <description>Hello, Hugo
#安装
使用 Homebrew 安装.(如果还没有安装Homebrew，参考：这里)
brew install hugo  #新建站点
直接在 Home 目录生成Blog 站点。
hugo new site ~/Blog  使用上述命令会在当前用户目录下面生成一个Blog 站点，打开后看到如下图的站点目录结构
Blog ├── archetypes ├── config.yaml ├── content ├── data ├── layouts ├── static └── themes  一共六个文件夹，外加一个全局配置文件config.yaml（类似 hexo 的_config.yml），各个文件夹的作用如下：
 archetypes：给不同的类型定义默认FrontMatter，
 content：源文件，相当于 hexo 的 source 目录
 data：数据文件，一般用不上
 layouts：模板
 static：静态资源，也就是不需要Hugo处理的静态资源，比如图片等
 themes：第三方主题，将第三方主题拷贝到这个文件夹下即可使用
  比较常用的就是 content 和 themes ，一个存放内容，一个存放主题。可以直接将 hexo 中 source 目录下的 md 文件全拷贝到content目录。 同时将图片资源文件拷贝到 static 目录。因为文章和目录结构都没有改变，所有文章里面的图片链接路径都不需要修改。如果之前的 Markdown 文件都使用了 Hexo 标准的 Front-matter，Hugo 支持 yaml、toml、json 三种格式的Front matter，像 title、date、categories、tags这样的字段，Hugo 也无缝支持。</description>
    </item>
    
    <item>
      <title>Windows下搭建Hugo博客</title>
      <link>https://dwg678.github.io/2019/blog/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dwg678.github.io/2019/blog/</guid>
      <description>★内容参考B站Up主CodeSheep，视频地址：https://www.bilibili.com/video/av51574688 我整理了Windows下的操作方法，如下：
1：在https://github.com/gohugoio/hugo/releases地址下找到Windows压缩文件下载，如下图你可以下载32或者64位的
featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513103543080-42645007.png
2:如何看hugo安装成没成功，打开cmd，输入hugo version，如图所示，则代表安装成功 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513104311337-59247151.png
3：安装成功后，用Hugo还创建自己的博客，命令如下图所示：hugo new site myblog 注：myblog为文件夹名字名字 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513104400669-308164512.png
3：输入dir，能看到文件夹已经创建好了，如图 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513104746195-1847106720.png
4：我们进入到myblog里面，可以看到如下内容 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513105110070-410624344.png
5:下载设置主题，去https://themes.gohugo.io/选择自己喜欢的主题进行下载，如图 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513105411063-698289161.png
6：这里我选择m10c，以他为例子，具体操作如图显示。注：前提一定要下git并且配置好！ featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513105733247-1170336546.png
7：主题下载成功如图 featured_image: https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513110131643-1221757335.png
8：去themes下，看看有没有，如图有啦 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513110358274-876342732.png
9：启动博客命令，输入 hugo server -t m10c &amp;ndash;buildDrafts featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513110652873-1708790104.png
10：如图所示，出来了 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513110844450-463620106.png
11：接下来就是创建文章，我们继续在根目录下创建，如图 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513111404737-367248422.png
12：那怎么写呢，推荐用VS Code来写，写完后记得保存！如图 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513113621727-277941586.png
13：然后再根目录下输入指令 hugo server -t m10c &amp;ndash;buildDrafts，如图 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513112328506-2027514860.png
14：再打开http://localhost:1313，如图 featured_image: https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513113807091-839861697.png
15：把博客部署的远端github上，首先创建仓库，如图 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513115447195-446798861.png
16：仓库已经有了，但是个空仓库，接下来敲命令hugo &amp;ndash;theme=m10c &amp;ndash;baseUrl=&amp;ldquo;地址&amp;rdquo; &amp;ndash;buildDrafts，如图 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513115904234-1855386864.png
17：成功后会在根目录下生成一个public文件，如图 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513120058123-157282331.png
18：把这个public传到github仓库上，首先进入到public，如图所示，已经把文件加到了仓库里面 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513131616264-757767342.png
17：要把本地public和远程github进行关联 featured_image:https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513131952890-741412180.png
18：然后还有个push命令，git push -u origin master，期间会让你输入账号密码，输入即可，如图完成 !|yukundio9527|(https://img2018.cnblogs.com/blog/1033328/201905/1033328-20190513132636901-1344078191.png
19：我们刷新下github页面，就会看到文件已经传上来了，如图 !</description>
    </item>
    
    <item>
      <title>This One Goes to 11!</title>
      <link>https://dwg678.github.io/2018/0.48-relnotes/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dwg678.github.io/2018/0.48-relnotes/</guid>
      <description>Hugo 0.48 is built with the brand new Go 1.11. On the technical side this means that Hugo now uses Go Modules for the build. The big new functional thing in Go 1.11 for Hugo is added support for variable overwrites. This means that you can now do this and get the expected result:
{{ $var := &amp;quot;Hugo Page&amp;quot; }} {{ if .IsHome }} {{ $var = &amp;quot;Hugo Home&amp;quot; }} {{ end }} Var is {{ $var }}  The above may look obvious, but has not been possible until now.</description>
    </item>
    
    <item>
      <title>Two Bug Fixes</title>
      <link>https://dwg678.github.io/2018/0.47.1-relnotes/</link>
      <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dwg678.github.io/2018/0.47.1-relnotes/</guid>
      <description> This is a bug-fix release with two fixes.  Fixes  Fix .Site.Params case regression fdff0d3a @bep #5094 Do not strip IE conditional statements 5a0ee2b9 @bep #5089  Updates to Linux Snap build  Remove unused files from Git, Perl, etc. 834617f9 @anthonyfok Add nodejs to allow PostCSS to work ef20ec1f @anthonyfok  </description>
    </item>
    
    <item>
      <title>Output Minification, Live-Reload Fixes and More</title>
      <link>https://dwg678.github.io/2018/0.47-relnotes/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dwg678.github.io/2018/0.47-relnotes/</guid>
      <description>Hugo 0.47 is named Hugo Reloaded. It adds minification support for the final rendered output (run hugo --minify), but it is mostly a bug fix release. And most notably, it fixes a set of issues with live-reloading/partial rebuilds when running hugo server. Working with bundles should now be a more pleasant experience, to pick one example.
This release represents 35 contributions by 6 contributors to the main Hugo code base.</description>
    </item>
    
    <item>
      <title>The Summer of Hugo</title>
      <link>https://dwg678.github.io/2018/0.46-relnotes/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dwg678.github.io/2018/0.46-relnotes/</guid>
      <description>**Hugo 0.46** is the closing credits to **The Summer of Hugo**. While most people have been relaxing on the beach, Hugo has been really busy:   0.42, June 12, 2018: Theme Composition and Inheritance! 0.43, July 9, 2018: Hugo Pipes!  This was followed by some more technical follow-up releases. And today, when July has turned into August, we come with another one. It&amp;rsquo;s not a big release. But with the big interest in Hugo Pipes, we felt that it was important to get this out there sooner rather than later.</description>
    </item>
    
    <item>
      <title>Hugo 0.45.1: Two Bug Fixes</title>
      <link>https://dwg678.github.io/2018/0.45.1-relnotes/</link>
      <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dwg678.github.io/2018/0.45.1-relnotes/</guid>
      <description> This is a bug-fix release with a couple of important fixes (and one enhancement).  Enhancements  Add Page.FirstSection 016dd4a6 @bep  Fixes  Fix .Site.GetPage regression 04d4c08d @bep #4989 Fix &amp;ldquo;borrow content from another language&amp;rdquo; issue c6b599a0 @bep #4986  </description>
    </item>
    
    <item>
      <title>Hugo 0.45: Revival of ref, relref and GetPage</title>
      <link>https://dwg678.github.io/2018/0.45-relnotes/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dwg678.github.io/2018/0.45-relnotes/</guid>
      <description>Hugo 0.45 is the revival of ref, relref and GetPage. @vassudanagunta and @bep have done some great work improving the API and implementation for the helper functions used to get one page. Before this release, the API was a little bit clumsy and the result potentially ambiguous in some situations.
Now you can simply do:
{{ with .Site.GetPage &amp;quot;/blog/my-post.md&amp;quot; }}{{ .Title }}{{ end }}  Or to get a section page:</description>
    </item>
    
    <item>
      <title>Hugo 0.44: Friday the 13th Edition</title>
      <link>https://dwg678.github.io/2018/0.44-relnotes/</link>
      <pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dwg678.github.io/2018/0.44-relnotes/</guid>
      <description>Hugo 0.44 is the follow-up release, or The Sequel, of the very well received 0.43 only days ago. That release added Hugo Pipes, with SCSS/SASS support, assets bundling and minification, ad-hoc image processing and much more.
This is mostly a bug-fix release, but it also includes several important improvements.
Many complained that their SVG images vanished when browsed from the hugo server. With Hugo Pipes MIME types suddenly got really important, but Hugo&amp;rsquo;s use of Suffix was ambiguous.</description>
    </item>
    
    <item>
      <title>And Now: Hugo Pipes!</title>
      <link>https://dwg678.github.io/2018/0.43-relnotes/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dwg678.github.io/2018/0.43-relnotes/</guid>
      <description>Hugo `0.43` adds a powerful and very simple to use **Assets Pipeline** with **SASS and SCSS** with source map support, **PostCSS** and **minification** and **fingerprinting** and **Subresource Integrity** and ... much more. Oh, did we mention that you can now do **ad-hoc image processing** and execute text resources as Go templates?  An example pipeline:
{{ $styles := resources.Get &amp;quot;scss/main.scss&amp;quot; | toCSS | postCSS | minify | fingerprint }} &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;{{ $styles.</description>
    </item>
    
  </channel>
</rss>